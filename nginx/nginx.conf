events {
    worker_connections 1024;
    use epoll;  # Linux에서 성능 최적화
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 성능 최적화 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    
    # 서버 토큰 숨기기 (보안)
    server_tokens off;
    
    # 클라이언트 요청 크기 제한 (대용량 파일 업로드 대비)
    client_max_body_size 10M;
    client_body_timeout 12;
    client_header_timeout 12;
    
    # 버퍼 크기 최적화
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;
    output_buffers 1 32k;
    postpone_output 1460;

    
    # 로깅 설정 (확장된 형식)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time ut="$upstream_response_time" '
                    'cs=$upstream_cache_status';

    # 성능 로그 형식 (선택적)
    log_format performance '$remote_addr - [$time_local] "$request" '
                          '$status $body_bytes_sent '
                          'rt=$request_time '
                          'ut="$upstream_response_time" '
                          'urt="$upstream_connect_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;  # 로그 레벨 명시

    # Rate Limiting (DDoS 방어)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=chat:10m rate=5r/s;  
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Gzip 압축 (향상된 설정)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;  # 1KB 이상만 압축
    gzip_proxied any;
    gzip_comp_level 6;     # 압축 레벨 (1-9, 6이 최적)
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/csv
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/pdf
        image/svg+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject;

    # 업스트림 설정 (헬스체크 및 로드밸런싱)
    upstream frontend {
        server react-frontend:3000 max_fails=3 fail_timeout=30s;
        # 필요시 추가 서버: server frontend2:3000 backup;
        keepalive 16;  # 업스트림 연결 풀
    }

    upstream gateway {
        server fastapi-gateway:8080 max_fails=3 fail_timeout=30s;
        # 필요시 추가 서버: server gateway2:8080 backup;
        keepalive 32;  # API 서버는 더 많은 연결 풀
    }

    # 메인 서버 설정
    server {
        listen 80;
        server_name localhost;
        
        # 연결 제한 적용 (IP당 최대 20개 연결)
        limit_conn conn_limit_per_ip 20;

        # 강화된 보안 헤더
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        
        # CSP 헤더 (Content Security Policy)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self' data:; connect-src 'self' ws: wss:;" always;

        # robots.txt (선택적)
        location = /robots.txt {
            add_header Content-Type text/plain;
            return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\n";
        }
        
        # favicon 처리
        location = /favicon.ico {
            proxy_pass http://frontend/favicon.ico;
            expires 30d;
            access_log off;
            log_not_found off;
        }

        # Frontend (React) - SPA 지원 및 최적화
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Frontend 최적화
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # React Router (SPA) 지원 - 404 시 index.html로 fallback
            proxy_intercept_errors on;
            error_page 404 = @frontend_fallback;
            
            # 타임아웃 설정 (Frontend는 빠른 응답)
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API Gateway (FastAPI) - Rate Limiting 적용
        location /api/ {
            # Rate Limiting: API는 초당 10요청, Chat은 초당 5요청
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 업스트림 연결 최적화
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 타임아웃 설정 (vLLM 응답 시간 고려)
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;  
            proxy_read_timeout 300s;  # 5분으로 증가 (긴 생성 시간 대비)
            
            # 버퍼링 설정
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_cache off;
            
            # 청크 전송 인코딩 및 스트리밍 최적화
            chunked_transfer_encoding on;
            add_header X-Accel-Buffering no;
            
            # 에러 페이지 처리
            proxy_intercept_errors on;
            error_page 502 503 504 /50x.html;
        }
        
        # Chat API 특별 처리 (더 엄격한 Rate Limiting)
        location /api/chat {
            limit_req zone=chat burst=10 nodelay;
            
            proxy_pass http://gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # SSE 스트리밍에 최적화된 설정
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Cache-Control no-cache;
            
            # 긴 스트리밍 세션을 위한 타임아웃
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 1800s;  # 30분 (긴 대화 세션)
            
            # 스트리밍 최적화
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_cache off;
            chunked_transfer_encoding on;
            add_header X-Accel-Buffering no;
        }

        # 헬스체크 엔드포인트 (모니터링용)
        location /health {
            proxy_pass http://gateway/health;
            proxy_set_header Host $host;
            access_log off;  # 헬스체크 로그 제외
            
            # 헬스체크는 빠른 응답 필요
            proxy_connect_timeout 5s;
            proxy_read_timeout 10s;
            proxy_send_timeout 5s;
        }
        
        # Nginx 상태 엔드포인트 (모니터링용)
        location /nginx_status {
            stub_status on;
            access_log off;
            # 내부 모니터링만 허용 (필요시 IP 제한)
            allow 127.0.0.1;
            allow 10.0.0.0/8;    # Docker 네트워크
            allow 172.16.0.0/12; # Docker 네트워크
            allow 192.168.0.0/16; # 로컬 네트워크
            deny all;
        }

        # 정적 파일 캐싱 및 최적화  
        location ~* \.(js|css|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # ETag 및 If-Modified-Since 지원
            etag on;
            add_header Last-Modified $date_gmt;
            if_modified_since exact;
        }
        
        # 이미지 파일 캐싱
        location ~* \.(png|jpg|jpeg|gif|ico|svg|webp)$ {
            proxy_pass http://frontend;
            expires 30d;
            add_header Cache-Control "public";
            add_header Vary "Accept-Encoding";
            
            # 이미지 최적화 헤더
            add_header X-Content-Type-Options nosniff;
            etag on;
        }
        
        # React Router 지원을 위한 fallback
        location @frontend_fallback {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 에러 페이지 처리
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # 보안: 숨겨진 파일 접근 차단
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 보안: 백업 파일 접근 차단
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # SSL 설정 (프로덕션용 - 필요시 활성화)
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com;  # 실제 도메인으로 변경
    #
    #     # SSL 인증서 설정
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     # SSL 보안 설정 (Mozilla Modern 기준)
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     # SSL 성능 최적화
    #     ssl_session_timeout 1d;
    #     ssl_session_cache shared:SSL:50m;
    #     ssl_session_tickets off;
    #     
    #     # OCSP Stapling
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #     
    #     # 보안 헤더 (HTTPS 전용)
    #     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    #     add_header X-Frame-Options DENY always;
    #     add_header X-Content-Type-Options nosniff always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    #     
    #     # HTTP -> HTTPS 리다이렉트를 위한 별도 서버 블록 필요
    # }
    #
    # # HTTP -> HTTPS 리다이렉트
    # server {
    #     listen 80;
    #     server_name yourdomain.com;  # 실제 도메인으로 변경
    #     return 301 https://$server_name$request_uri;
    # }
}
